// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/db.dart';
import 'api/service.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  DateTime dco_decode_Chrono_Local(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  WordCache dco_decode_box_autoadd_word_cache(dynamic raw);

  @protected
  WordResult dco_decode_box_autoadd_word_result(dynamic raw);

  @protected
  History dco_decode_history(dynamic raw);

  @protected
  HistorySummary dco_decode_history_summary(dynamic raw);

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw);

  @protected
  List<History> dco_decode_list_history(dynamic raw);

  @protected
  List<HistorySummary> dco_decode_list_history_summary(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  WordCache? dco_decode_opt_box_autoadd_word_cache(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  WordCache dco_decode_word_cache(dynamic raw);

  @protected
  WordResult dco_decode_word_result(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  DateTime sse_decode_Chrono_Local(SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  WordCache sse_decode_box_autoadd_word_cache(SseDeserializer deserializer);

  @protected
  WordResult sse_decode_box_autoadd_word_result(SseDeserializer deserializer);

  @protected
  History sse_decode_history(SseDeserializer deserializer);

  @protected
  HistorySummary sse_decode_history_summary(SseDeserializer deserializer);

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer);

  @protected
  List<History> sse_decode_list_history(SseDeserializer deserializer);

  @protected
  List<HistorySummary> sse_decode_list_history_summary(
      SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  WordCache? sse_decode_opt_box_autoadd_word_cache(
      SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  WordCache sse_decode_word_cache(SseDeserializer deserializer);

  @protected
  WordResult sse_decode_word_result(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer);

  @protected
  void sse_encode_Chrono_Local(DateTime self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_word_cache(
      WordCache self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_word_result(
      WordResult self, SseSerializer serializer);

  @protected
  void sse_encode_history(History self, SseSerializer serializer);

  @protected
  void sse_encode_history_summary(
      HistorySummary self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer);

  @protected
  void sse_encode_list_history(List<History> self, SseSerializer serializer);

  @protected
  void sse_encode_list_history_summary(
      List<HistorySummary> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_word_cache(
      WordCache? self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_word_cache(WordCache self, SseSerializer serializer);

  @protected
  void sse_encode_word_result(WordResult self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;
}
